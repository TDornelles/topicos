(defun somaElementos (lista)
    (cond ((atom lista) 0 )
          ('T(+ (car lista) (somaElementos(cdr lista))))
    )
)

(defun soma(X Y)
    (cond ((eq Y 0) X)
          ((negativo Y) (soma(1- X) (1+ Y)))
          ('T (soma (1+ X) (1- Y)))
    )
)

(defun subt(X Y)
    (cond ((eq Y 0) X)
          ((negativo Y) (subt(1+ X) (1+ Y)))
          ('T (soma (1- X) (1- Y)))
    )
)

(defun negativo(X)
    (cond ((eq X 0) 'nil)
          ('T (ehNeg X X))
    )
)

(defun ehNeg(A D)
    (cond ((eq A 0) 'T)
          ((eq D 0) 'nil)
          ('T (ehNeg (1+ a) (1- D))) 
    )
)

(defun negacao (X)
    (cond
        (X 'nil)
        ('T 'T)
     )
)

;;(defun maior(X Y)
;;    (cond ((eq X Y) 'nil)
;;          ((negativo (soma X Y)) 'T)
;;          ((negativo Y) )
;;     )
;;)

(defun maior (X Y)
  (cond 
    ((eq X 0) (negativo Y))
    ((eq Y 0) (negacao (negativo X)))
    ((negativo X)
     (cond
       ((negativo Y) (maior (1+ X) (1+ Y)))
       ('T 'T)
       )
     )
    ((negativo Y) 'T)
    ('T (maior (1- X) (1- Y)))
    )
  )

(defun menor (X Y)
  (cond 
    ((eq Y 0) (negativo X))
    ((eq X 0) (negacao (negativo Y)))
    ((negativo X)
     (cond
       ((negativo Y) (menor (1+ X) (1+ Y)))
       ('T 'T)
       )
     )
    ((negativo Y) 'T)
    ('T (menor (1- X) (1- Y)))
  )
)

(print (somaElementos '(2 3 5 7)))
(print (negativo -3))
(print (negativo 71))
(print (negativo -92))
(print (soma 5 2))
(print (soma 5 -2))
(print (soma -5 3))
(print (maior 4 5))
(print (subt -5 3))
(print (subt 5 3))
(print (maior 4 5))
